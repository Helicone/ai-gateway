name: NPM CLI Package CI (Docker-based)

on:
  push:
    branches: ["main"]
    paths:
      - "npx/**"
      - "crates/**"
      - "Cargo.toml"
      - "Cargo.lock"
  pull_request:
    branches: ["main"]
    paths:
      - "npx/**"
      - "crates/**"
      - "Cargo.toml"
      - "Cargo.lock"

env:
  CARGO_TERM_COLOR: always

jobs:
  # Test the Node.js wrapper
  test-npm-package:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Build Linux binary with Docker
        run: |
          docker build -f npx/docker/Dockerfile.linux -t helicone-router:linux .
          mkdir -p npx/dist
          docker run --rm -v "$PWD/npx/dist:/dist" helicone-router:linux

      - name: Run NPM tests
        working-directory: npx
        run: npm test

      - name: Test CLI execution
        working-directory: npx
        run: |
          node bin/index.js --help
          npm link
          helicone-router --help
          npm unlink -g helicone-router

  # Build Linux binaries with Docker
  build-linux-docker:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - dockerfile: npx/docker/Dockerfile.linux
            tag: helicone-router:linux
            binary: helicone-router-linux
            name: linux
          - dockerfile: npx/docker/Dockerfile.linux-musl
            tag: helicone-router:linux-musl
            binary: helicone-router-linux-musl
            name: linux-musl
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build binary with Docker
        run: |
          echo "Building ${{ matrix.name }} binary..."
          docker build -f ${{ matrix.dockerfile }} -t ${{ matrix.tag }} .
          mkdir -p dist
          docker run --rm -v "$PWD/dist:/dist" ${{ matrix.tag }}
          echo "Built binary:"
          ls -lh dist/
          file dist/* || echo "file command not available"

      - name: Test binary execution
        run: |
          echo "Testing ${{ matrix.binary }} execution:"
          chmod +x dist/${{ matrix.binary }}
          ./dist/${{ matrix.binary }} --help || echo "Binary test completed"

      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.binary }}
          path: dist/${{ matrix.binary }}

  # Build macOS binary (no Docker option for macOS)
  build-macos:
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build macOS binary
        run: cargo build --release

      - name: Upload macOS binary
        uses: actions/upload-artifact@v3
        with:
          name: helicone-router-macos
          path: target/release/llm-proxy

  # Test distribution compatibility with Docker
  test-distributions-docker:
    needs: build-linux-docker
    runs-on: ubuntu-latest
    strategy:
      matrix:
        container:
          - ubuntu:20.04
          - ubuntu:22.04
          - debian:11
          - alpine:latest
        binary:
          - helicone-router-linux
          - helicone-router-linux-musl
        exclude:
          # Use musl binary for Alpine, glibc for others
          - container: alpine:latest
            binary: helicone-router-linux
          - container: ubuntu:20.04
            binary: helicone-router-linux-musl
          - container: ubuntu:22.04
            binary: helicone-router-linux-musl
          - container: debian:11
            binary: helicone-router-linux-musl
    
    steps:
      - name: Download binary
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.binary }}
          path: /tmp/

      - name: Test binary in container
        run: |
          echo "Testing ${{ matrix.binary }} in ${{ matrix.container }}..."
          docker run --rm -v /tmp:/tmp ${{ matrix.container }} sh -c "
            chmod +x /tmp/${{ matrix.binary }} && 
            echo 'Binary info:' && 
            ls -lh /tmp/${{ matrix.binary }} &&
            echo 'Testing execution:' &&
            /tmp/${{ matrix.binary }} --help || echo 'Test completed with exit code $?'
          "

  # Validate complete package with all binaries
  validate-complete-package-docker:
    needs: [test-npm-package, build-linux-docker, build-macos]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Download all binaries
        uses: actions/download-artifact@v3
        with:
          path: artifacts/

      - name: Prepare complete package
        working-directory: npx
        run: |
          echo "Preparing complete package with all binaries..."
          cp ../artifacts/helicone-router-linux/helicone-router-linux dist/
          cp ../artifacts/helicone-router-macos/llm-proxy dist/helicone-router-macos
          chmod +x dist/*
          
          echo "Package contents:"
          ls -lh dist/
          echo ""
          echo "Binary details:"
          file dist/* || echo "file command not available"
          echo ""
          echo "Total package size:"
          du -sh .

      - name: Final package validation
        working-directory: npx
        run: |
          echo "Running final validation..."
          npm test
          npm run publish:dry
          echo "âœ… Docker-based package validation complete!"

  # Performance analysis
  docker-performance-analysis:
    needs: build-linux-docker
    runs-on: ubuntu-latest
    
    steps:
      - name: Download binaries
        uses: actions/download-artifact@v3
        with:
          path: artifacts/

      - name: Analyze Docker build performance
        run: |
          echo "=== Docker Build Performance Analysis ==="
          echo ""
          echo "Binary sizes:"
          for artifact in artifacts/*/; do
            if [ -f "${artifact}"*linux* ]; then
              binary_name=$(basename "$artifact")
              size=$(du -h "${artifact}"* | cut -f1)
              echo "  $binary_name: $size"
            fi
          done
          
          echo ""
          echo "Binary startup performance (Linux only):"
          for artifact in artifacts/*/; do
            if [ -f "${artifact}"*linux* ]; then
              binary_name=$(basename "$artifact")
              chmod +x "${artifact}"*
              echo -n "  $binary_name: "
              time timeout 5s "${artifact}"* --help >/dev/null 2>&1 || echo "completed"
            fi
          done 