name: NPM CLI Package CI

on:
  push:
    branches: ["main"]
    paths:
      - "npx/**"
      - "crates/**"
      - "Cargo.toml"
      - "Cargo.lock"
      - ".github/workflows/npm-cli-ci.yml"
  pull_request:
    branches: ["main"]
    paths:
      - "npx/**"
      - "crates/**"
      - "Cargo.toml"
      - "Cargo.lock"
      - ".github/workflows/npm-cli-ci.yml"

env:
  CARGO_TERM_COLOR: always

jobs:
  # Test the Node.js wrapper and package structure
  test-npm-package:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "npx/package.json"

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-gnu
          override: true

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build Rust binary for Linux
        run: cargo build --release --target x86_64-unknown-linux-gnu

      - name: Prepare NPM package
        working-directory: npx
        run: |
          cp ../target/x86_64-unknown-linux-gnu/release/llm-proxy dist/helicone-router-linux
          chmod +x dist/helicone-router-linux

      - name: Install NPM dependencies (if any)
        working-directory: npx
        run: |
          if [ -f package-lock.json ]; then npm ci; else echo "No package-lock.json found"; fi

      - name: Run NPM package tests
        working-directory: npx
        run: npm test

      - name: Test CLI execution
        working-directory: npx
        run: |
          echo "Testing direct Node.js execution:"
          node bin/index.js --help
          
          echo "Testing npm link:"
          npm link
          helicone-router --help
          npm unlink -g helicone-router

      - name: Validate package for publishing
        working-directory: npx
        run: npm run publish:dry

  # Build and test on multiple platforms
  build-cross-platform:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary-name: helicone-router-linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            binary-name: helicone-router-linux-musl
          - os: macos-latest
            target: x86_64-apple-darwin
            binary-name: helicone-router-macos
          - os: macos-latest
            target: aarch64-apple-darwin
            binary-name: helicone-router-macos-arm64

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install musl tools (Linux only)
        if: contains(matrix.target, 'musl')
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.binary-name }}
          path: target/${{ matrix.target }}/release/llm-proxy

  # Test in different Linux distributions
  test-distributions:
    needs: build-cross-platform
    strategy:
      matrix:
        container:
          - ubuntu:20.04
          - ubuntu:22.04
          - debian:11
          - alpine:latest
    
    runs-on: ubuntu-latest
    container: ${{ matrix.container }}
    
    steps:
      - name: Install curl and basic tools
        run: |
          if command -v apt-get >/dev/null 2>&1; then
            apt-get update && apt-get install -y curl
          elif command -v apk >/dev/null 2>&1; then
            apk add --no-cache curl
          fi

      - name: Install Node.js (Ubuntu/Debian)
        if: startsWith(matrix.container, 'ubuntu') || startsWith(matrix.container, 'debian')
        run: |
          curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
          apt-get install -y nodejs

      - name: Install Node.js (Alpine)
        if: startsWith(matrix.container, 'alpine')
        run: |
          apk add --no-cache nodejs npm

      - name: Download Linux binary
        uses: actions/download-artifact@v3
        with:
          name: helicone-router-linux
          path: /tmp/

      - name: Test binary execution
        run: |
          chmod +x /tmp/llm-proxy
          /tmp/llm-proxy --help || echo "Binary test completed with exit code $?"

      - name: Test Node.js environment
        run: |
          node --version
          npm --version

  # Comprehensive package validation
  validate-package:
    needs: [test-npm-package, build-cross-platform]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Download all binary artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/

      - name: Prepare complete package
        working-directory: npx
        run: |
          # Copy binaries to dist folder
          cp ../artifacts/helicone-router-linux/llm-proxy dist/helicone-router-linux
          cp ../artifacts/helicone-router-macos/llm-proxy dist/helicone-router-macos
          chmod +x dist/*

      - name: Run comprehensive validation
        working-directory: npx
        run: |
          echo "=== Package Structure ==="
          ls -la
          echo ""
          echo "=== Dist Contents ==="
          ls -lh dist/
          echo ""
          echo "=== Binary Types ==="
          file dist/* || echo "file command not available"
          echo ""
          echo "=== Package Size ==="
          du -sh .
          echo ""
          echo "=== Running Tests ==="
          npm test

      - name: Simulate publishing
        working-directory: npx
        run: |
          echo "=== What would be published ==="
          npm run publish:dry

  # Security and quality checks
  security-checks:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: NPM audit
        working-directory: npx
        run: |
          # Create package-lock.json if it doesn't exist
          if [ ! -f package-lock.json ]; then
            npm install --package-lock-only
          fi
          npm audit --audit-level=moderate || echo "Audit completed with warnings"

      - name: Check for common security issues
        working-directory: npx
        run: |
          echo "=== Checking for hardcoded secrets ==="
          grep -r -i "password\|secret\|key\|token" . || echo "No obvious secrets found"
          
          echo "=== Checking file permissions ==="
          find . -type f -perm 0777 || echo "No world-writable files found"
          
          echo "=== Package.json validation ==="
          node -e "
            const pkg = require('./package.json');
            console.log('Package name:', pkg.name);
            console.log('Version:', pkg.version);
            console.log('Files field:', pkg.files);
            console.log('Bin field:', pkg.bin);
            if (!pkg.files || pkg.files.length === 0) {
              console.error('Warning: No files field specified');
              process.exit(1);
            }
          "

  # Performance and size monitoring
  performance-check:
    needs: build-cross-platform
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download binary artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/

      - name: Analyze binary sizes
        run: |
          echo "=== Binary Size Analysis ==="
          for binary in artifacts/*/llm-proxy; do
            echo "$(basename $(dirname $binary)): $(du -h $binary | cut -f1)"
          done
          
          echo ""
          echo "=== Total Package Size ==="
          total_size=$(du -sh artifacts/ | cut -f1)
          echo "All binaries: $total_size"
          
          # Warn if any binary is too large
          for binary in artifacts/*/llm-proxy; do
            size_bytes=$(stat -c%s "$binary")
            size_mb=$((size_bytes / 1024 / 1024))
            if [ $size_mb -gt 50 ]; then
              echo "WARNING: $(basename $(dirname $binary)) is ${size_mb}MB (> 50MB)"
            fi
          done

      - name: Binary startup performance test
        run: |
          echo "=== Binary Startup Performance ==="
          for binary in artifacts/*/llm-proxy; do
            binary_name=$(basename $(dirname $binary))
            chmod +x "$binary"
            echo -n "$binary_name startup time: "
            time timeout 10s "$binary" --help >/dev/null 2>&1 || echo "timed out or failed"
          done 