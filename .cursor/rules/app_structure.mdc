---
description:
globs:
alwaysApply: false
---
\
# LLM Proxy Application Structure

The main application logic is defined in [`src/app.rs`](mdc:src/app.rs).

## Key Components

-   **`App` struct**: The top-level application struct that holds the application state and the service stack.
-   **`AppState` struct**: Contains the shared application state, including configuration (`Config`), optional MinIO client, rate limiters (`AuthedLimiterConfig`, `UnauthedLimiterConfig`), database store (`StoreRealm`), and provider change broadcasts (`ProviderChangeBroadcasts`).
-   **`ServiceStack` type**: Defines the global middleware stack applied to incoming requests.
-   **`ModelRouter`**: Routes requests based on the model specified. Located in [`src/router/model.rs`](mdc:src/router/model.rs).
-   **Configuration**: Loaded from `Config` struct defined in [`src/config.rs`](mdc:src/config.rs).

## Middleware Stack (Global)

The middleware stack defined in `app.rs` includes:

1.  `BufferLayer`
2.  `CatchPanic` (Commented out, but intended)
3.  `AsyncRequireAuthorizationLayer` (Handles authentication/authorization via `AuthService`)
4.  `RequestContext` layer (`crate::middleware::request_context::Layer`)
5.  `BufferLayer` (for request queueing)

The `ModelRouter` then handles routing, potentially applying further model-specific and provider-specific middleware layers.

## Startup Process

The `App::new` function initializes the application state, connects to the database, sets up rate limiters, initializes the `ModelRouter`, and builds the service stack.
The `App::run` method binds the TCP listener, starts the Hyper server, and handles graceful shutdown.
